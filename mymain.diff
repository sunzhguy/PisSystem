diff --git a/src/evio/evio.c b/src/evio/evio.c
index 0475018..a5709e3 100755
--- a/src/evio/evio.c
+++ b/src/evio/evio.c
@@ -4,7 +4,7 @@
  * @Author: sunzhguy
  * @Date: 2020-07-16 11:42:51
  * @LastEditor: sunzhguy
- * @LastEditTime: 2020-12-01 16:19:09
+ * @LastEditTime: 2020-12-02 10:54:08
  */ 
 #include <stdio.h>
 #include <unistd.h>
@@ -89,11 +89,11 @@ void EVIO_EventCtlLoop_Start(T_EVENT_CTL *_ptEventCtl)
         if (ptEventFd->bIsDel)
             continue;
         if ((events & EPOLLIN) && (ptEventFd->iEvents & EPOLLIN))
-            ptEventFd->pfEventCallBack(_ptEventCtl, ptEventFd, ptEventFd->iFd, EV_READ, ptEventFd->pvArg);
+            ptEventFd->pfEventCallBack(_ptEventCtl, ptEventFd, ptEventFd->iFd, E_EV_READ, ptEventFd->pvArg);
         if (!ptEventFd->bIsDel && (events & EPOLLOUT) && (ptEventFd->iEvents & EPOLLOUT))
-            ptEventFd->pfEventCallBack(_ptEventCtl, ptEventFd, ptEventFd->iFd, EV_WRITE, ptEventFd->pvArg);
+            ptEventFd->pfEventCallBack(_ptEventCtl, ptEventFd, ptEventFd->iFd, E_EV_WRITE, ptEventFd->pvArg);
         if (!ptEventFd->bIsDel && events & (EPOLLHUP | EPOLLERR))
-            ptEventFd->pfEventCallBack(_ptEventCtl, ptEventFd, ptEventFd->iFd, EV_ERROR, ptEventFd->pvArg);
+            ptEventFd->pfEventCallBack(_ptEventCtl, ptEventFd, ptEventFd->iFd, E_EV_ERROR, ptEventFd->pvArg);
     }
 
     _ptEventCtl->bLooping = 0;
diff --git a/src/main.c b/src/main.c
index 63f9d39..b9673bb 100755
--- a/src/main.c
+++ b/src/main.c
@@ -4,9 +4,9 @@
  * @Author: sunzhguy
  * @Date: 2020-07-15 11:02:55
  * @LastEditor: sunzhguy
- * @LastEditTime: 2020-12-02 09:28:49
+ * @LastEditTime: 2020-12-02 10:55:29
  */ 
-
+//__attribute__ ((unused)) #define UNUSED(x) (void)(x)
 
 #include <stdio.h>
 #include <time.h>
@@ -15,6 +15,7 @@
 #include <errno.h>
 #include <time.h>
 #include <sys/time.h>
+#include <pthread.h>
 #include "evio/evio.h"
 #include "net/evnet.h"
 #include "hash/shash.h"
@@ -26,12 +27,12 @@
 
 
 
-void timer_out_ctrl(void *_self, T_EV_TIMER *ev_timer,  void *arg)
+void Main_TimerOut_Handle(void *_pvEventCtl, T_EV_TIMER *_ptEventTimer,  void *_pvArg)
 {
-    T_EVENT_CTL * evctl = (T_EVENT_CTL * )_self;
-    printf("++++++++++++++++++++timout->index:%ld tm:%ld,%p\r\n",ev_timer->u64Index,ev_timer->u64Expire,evctl);
-	EVIO_EventTimer_Init(ev_timer,1000,timer_out_ctrl,NULL);
-    EVIO_EventTimer_Start(evctl,ev_timer);
+    T_EVENT_CTL * ptEventCtl = (T_EVENT_CTL * )_pvEventCtl;
+    printf("++++++++++++++++++++timout->index:%ld tm:%ld,%p\r\n",_ptEventTimer->u64Index,_ptEventTimer->u64Expire,ptEventCtl);
+	EVIO_EventTimer_Init(_ptEventTimer,1000,Main_TimerOut_Handle,NULL);
+    EVIO_EventTimer_Start(ptEventCtl,_ptEventTimer);
 }
 
 #if 0
@@ -82,20 +83,20 @@ static void watcher_B2A_cb (ev_ctl_t *evctl, ev_fd_t *evfd, int fd, ev_type_t ty
 #endif
 
 
-void handle_udp_event(T_EVENT_CTL *ctl, struct servfds *sfd)
+void Main_Handle_UDPNanomsgEvent(T_EVENT_CTL *_ptEventCtl, T_MAIN_NANOMSGFDS *_ptMainNanoMsgFds)
 {
-	struct server *s = sfd->arg;
+	T_MAINSERVER *ptMainServer = _ptMainNanoMsgFds->pvArg;
 	printf("handle udp event....\r\n");
 }
 
-static void main_loop_cb(T_EVENT_CTL *evctl, T_EVENT_FD *evfd, int fd, E_EV_TYPE type, void *arg)
+void Main_EventLoop_Handle(T_EVENT_CTL *_ptEventCtl, T_EVENT_FD *_ptEventFd, int _iFd, E_EV_TYPE _eType, void *_pvArg)
 {
-	struct servfds *sfd = arg;
-	struct server *s = sfd->arg;
-
-    switch (type) {
+	T_MAIN_NANOMSGFDS *ptMainNanoMsgFds = _pvArg;
+	//T_MAINSERVER *ptMainServer = _ptMainNanoMsgFds->pvArg;
+    
+    switch (_eType) {
 	    case E_EV_READ:
-	        sfd->cb(evctl, sfd);
+	        ptMainNanoMsgFds->pfCallBack(_ptEventCtl, ptMainNanoMsgFds);
 	        break;
 		case E_EV_WRITE:
 			printf("Main loop write event, unexpected\n");
@@ -108,102 +109,113 @@ static void main_loop_cb(T_EVENT_CTL *evctl, T_EVENT_FD *evfd, int fd, E_EV_TYPE
     }
 }
 
-int32_t nn_socket_init(struct server *s)
+int32_t Main_NanomsgSocket_Init(T_MAINSERVER *_ptMainServer)
 {
-	struct servloop *sl = &s->sloop;
 	size_t size = sizeof(size_t);
-	sl->sfds_udp.n = nn_socket(AF_SP, NN_PAIR);
-	if (-1 == sl->sfds_udp.n)
-		goto err;
-	if (-1 == nn_bind(sl->sfds_udp.n, "inproc://udp2serv"))
-		goto err1;
+	T_MAINSERVEREVENTLOOP *ptMainServerEventLoop = &_ptMainServer->tMainServerEventLoop;
 	
-	if (-1 == nn_getsockopt(sl->sfds_udp.n, NN_SOL_SOCKET, NN_RCVFD, (char *)&sl->sfds_udp.s, &size))
-		goto err1;
+	ptMainServerEventLoop->tNanoMsgFdsUDP.iSysFd= nn_socket(AF_SP, NN_PAIR);
+	if (-1 == ptMainServerEventLoop->tNanoMsgFdsUDP.iNanomsgFd)
+	{
+		printf("+++main_loop nn_socket error...\n");
+		return -1;
+	}
+	if (-1 == nn_bind(ptMainServerEventLoop->tNanoMsgFdsUDP.iNanomsgFd, "inproc://udp2serv"))
+	{
+		nn_close(ptMainServerEventLoop->tNanoMsgFdsUDP.iNanomsgFd);
+		printf("+++main_loop nn_bind error...\n");
+		return -1;
+	}
 	
+	if (-1 == nn_getsockopt(ptMainServerEventLoop->tNanoMsgFdsUDP.iNanomsgFd, NN_SOL_SOCKET, NN_RCVFD, (char *)&ptMainServerEventLoop->tNanoMsgFdsUDP.iSysFd, &size))
+	{
+     	nn_close(ptMainServerEventLoop->tNanoMsgFdsUDP.iNanomsgFd);
+		printf("+++main_loop nn_getsockopt error...\n");
+		return -1;
+	}
 	return 0;
-err1:
-	nn_close(sl->sfds_udp.n);
-err:
-	return -1;
 }
-void nn_socket_close(struct server *s)
+void Main_NanomsgSocket_Close(T_MAINSERVER *_ptMainServer)
 {
-	struct servloop *sl = &s->sloop;
-	close(sl->sfds_udp.s);
-	nn_close(sl->sfds_udp.n);
+	T_MAINSERVEREVENTLOOP *ptMainServerEventLoop = &_ptMainServer->tMainServerEventLoop;
+	close(ptMainServerEventLoop->tNanoMsgFdsUDP.iSysFd);
+	nn_close(ptMainServerEventLoop->tNanoMsgFdsUDP.iNanomsgFd);
 
 }
-int32_t  main_loop(struct server *s)
+int32_t  Main_Loop_Init(T_MAINSERVER *_ptMainServer)
 {
 	
-	struct servloop *sl = &s->sloop;
-	if (-1 == nn_socket_init(s))
+	T_MAINSERVEREVENTLOOP *ptMainServerEventLoop = &_ptMainServer->tMainServerEventLoop;
+	if (-1 == Main_NanomsgSocket_Init(_ptMainServer))
 		return -1;
 
-	sl->sfds_udp.cb = handle_udp_event;//UDP enventloop main server
-    sl->sfds_udp.arg = s;
-
-	 s->sloop.evctl = EVIO_EventCtl_Create();  //创建一个事件控制器 creator event contoler
-	 if(NULL == s->sloop.evctl)
-	 goto err1;
+	ptMainServerEventLoop->tNanoMsgFdsUDP.pfCallBack= Main_Handle_UDPNanomsgEvent;//UDP enventloop main server
+    ptMainServerEventLoop->tNanoMsgFdsUDP.pvArg = _ptMainServer;
+	ptMainServerEventLoop->ptEventCtl= EVIO_EventCtl_Create();  //创建一个事件控制器 creator event contoler
+	if(NULL == ptMainServerEventLoop->ptEventCtl)
+	 {
+		 printf("+++ptMainServerEventLoop->ptEventCtl error\n");
+		 Main_NanomsgSocket_Close(_ptMainServer);
+		 return -1;
+	 }
 	 
-    sl->sfds_udp.evfd = EVIO_EventFd_Add(sl->evctl, sl->sfds_udp.s, main_loop_cb, &sl->sfds_udp);//add the event fd 
-	if (NULL == sl->sfds_udp.evfd)
-		goto err2;
-	 EVIO_Event_Watch_Read(s->sloop.evctl, sl->sfds_udp.evfd);
-	 EVIO_EventTimer_Init(&s->ev_timer,1000,timer_out_ctrl,NULL);
-	 EVIO_EventTimer_Start(s->sloop.evctl,&s->ev_timer);
-
+    ptMainServerEventLoop->tNanoMsgFdsUDP.ptEventFd = EVIO_EventFd_Add(ptMainServerEventLoop->ptEventCtl,\
+													  ptMainServerEventLoop->tNanoMsgFdsUDP.iSysFd, \
+													  Main_EventLoop_Handle, &ptMainServerEventLoop->tNanoMsgFdsUDP);//add the event fd 
+	if (NULL == ptMainServerEventLoop->tNanoMsgFdsUDP.ptEventFd)
+	{
+		printf("+++ptMainServerEventLoop->tNanoMsgFdsUDP.ptEventFd error\n");
+		EVIO_EventCtl_Free(ptMainServerEventLoop->ptEventCtl);
+		Main_NanomsgSocket_Close(_ptMainServer);
+		return -1;
+	}
+	 EVIO_Event_Watch_Read(ptMainServerEventLoop->ptEventCtl, ptMainServerEventLoop->tNanoMsgFdsUDP.ptEventFd);
+	 EVIO_EventTimer_Init(&_ptMainServer->tEventTimer,1000,Main_TimerOut_Handle,NULL);
+	 EVIO_EventTimer_Start(ptMainServerEventLoop->ptEventCtl,&_ptMainServer->tEventTimer);
 	 return 0;
-err2:
-	EVIO_EventCtl_Free(sl->evctl);
-err1:
-	nn_socket_close(s);
-	return -1;
 }
 
-void main_loop_del(struct server *s)
+void Main_Loop_Del(T_MAINSERVER *_ptMainServer)
 {
-	struct servloop *sl = &s->sloop;
-	EVIO_EventFd_Del(sl->evctl, sl->sfds_udp.evfd);
-	EVIO_EventCtl_Free(sl->evctl);
-	nn_socket_close(s);
+	T_MAINSERVEREVENTLOOP *ptMainServerEventLoop = &_ptMainServer->tMainServerEventLoop;
+	EVIO_EventFd_Del(ptMainServerEventLoop->ptEventCtl, ptMainServerEventLoop->tNanoMsgFdsUDP.ptEventFd);
+	EVIO_EventCtl_Free(ptMainServerEventLoop->ptEventCtl);
+	Main_NanomsgSocket_Close(_ptMainServer);
 }
 int main( void )
 {
      int i =0;
 	 int ret =0;
-	 struct server server;
-	 pthread_t thread_udp;
+	 T_MAINSERVER tmainServer;
+	 pthread_t tThreadUDP;
 	 
-	 ret = main_loop(&server);
+	 ret = Main_Loop_Init(&tmainServer);
 	 if(-1 == ret)
-	 goto err1;
-     server.start_num = 0;
-	 pthread_mutex_init(&server.start_lock, NULL);
-	 pthread_cond_init(&server.start_cond, NULL);
+	 {
+		printf("+++main loop init... error\n");
+		return -1;
+	 }
+     tmainServer.iThread_bStartCnt = 0;
+	 pthread_mutex_init(&tmainServer.tThread_StartMutex, NULL);
+	 pthread_cond_init(&tmainServer.tThread_StartCond, NULL);
+	 ret =pthread_create(&tThreadUDP,NULL,udp_service,&tmainServer);
 
-	 ret =pthread_create(&thread_udp,NULL,udp_service,&server);
 	 if(-1 == ret)
-	 goto err2;
-
-	 while (server.start_num < 1) {
-        pthread_mutex_lock(&server.start_lock);
-        pthread_cond_wait(&server.start_cond, &server.start_lock);
-        pthread_mutex_unlock(&server.start_lock);
-        printf("start num is %d", server.start_num);    
+	 {
+		printf("+++udp pthread create... error\n");
+		Main_Loop_Del(&tmainServer);
+		return -1; 
+	 }
+
+	 while (tmainServer.iThread_bStartCnt < 1) {
+        pthread_mutex_lock(&tmainServer.tThread_StartMutex);
+        pthread_cond_wait(&tmainServer.tThread_StartCond, &tmainServer.tThread_StartMutex);
+        pthread_mutex_unlock(&tmainServer.tThread_StartMutex);
+        printf("pthread isstart cnt is %d\n", tmainServer.iThread_bStartCnt);    
   	}
      while(1)
      {
-        EVIO_EventCtlLoop_Start(server.sloop.evctl);
+        EVIO_EventCtlLoop_Start(tmainServer.tMainServerEventLoop.ptEventCtl);
      }
-err2:
-	printf("main err2...\r\n");
-	 main_loop_del(&server);
-err1:
-	printf("main err1....\r\n");
-	 return -1;
-
-        
+  return 0;
 }
\ No newline at end of file
diff --git a/src/main.h b/src/main.h
index cee388c..7fdca55 100755
--- a/src/main.h
+++ b/src/main.h
@@ -4,32 +4,35 @@
  * @Author: sunzhguy
  * @Date: 2020-07-22 09:04:27
  * @LastEditor: sunzhguy
- * @LastEditTime: 2020-12-01 14:58:45
+ * @LastEditTime: 2020-12-02 10:51:37
  */ 
 
 #ifndef _MAIN_H
 #define _MAIN_H
+#include "evio/evio.h"
 
-
-struct servfds {
-	int s;			/* sys fd*/
-	int n;			/* nanomsg fd */
-	T_EVENT_FD *evfd;
-	void (*cb)(T_EVENT_CTL *, struct servfds *);
-	void *arg;
+typedef struct _T_MAINSERVER 	  T_MAINSERVER;
+typedef struct _T_MAIN_NANOMSGFDS T_MAIN_NANOMSGFDS;
+ struct _T_MAIN_NANOMSGFDS{
+	int iSysFd;			/* sys fd*/
+	int iNanomsgFd;			/* nanomsg fd */
+	T_EVENT_FD *ptEventFd;
+	void (*pfCallBack)(T_EVENT_CTL *, T_MAIN_NANOMSGFDS *);
+	void *pvArg;
 };
 
-struct servloop {
-	T_EVENT_CTL *evctl;
-	struct servfds  sfds_udp;//主服务循环 ---》UDP 与main loop 之间的通信
-};
 
-struct server {
-    T_EV_TIMER ev_timer;//添加一个定时器
-    struct servloop sloop;//主服务循环
-	int32_t start_num; //启动server 服务线程数
-	pthread_mutex_t start_lock;
-    pthread_cond_t start_cond;
+typedef struct  {
+	T_EVENT_CTL *ptEventCtl;
+	T_MAIN_NANOMSGFDS  tNanoMsgFdsUDP;//主服务循环 ---》UDP 与main loop 之间的通信
+}T_MAINSERVEREVENTLOOP;
+
+struct _T_MAINSERVER {
+    T_EV_TIMER tEventTimer;//添加一个定时器
+    T_MAINSERVEREVENTLOOP tMainServerEventLoop;//主服务循环
+	int32_t iThread_bStartCnt; //启动server 服务线程数
+	pthread_mutex_t tThread_StartMutex;
+    pthread_cond_t tThread_StartCond;
 };
 
 #endif
\ No newline at end of file
diff --git a/src/net/evnet.c b/src/net/evnet.c
index 0459485..373e2ae 100755
--- a/src/net/evnet.c
+++ b/src/net/evnet.c
@@ -105,7 +105,7 @@ static void _EV_NET_EventUDPNetCallBack(T_EVENT_CTL *_ptEventCtl, T_EVENT_FD *_p
 }
 
 /*启动UDP server*/
-T_EVENT_UDP *EV_NET_EventUDP_CreateAndStart(T_EVENT_CTL *_ptEventCtl, char *_pcIpaddr, uint16_t _Port, PF_EVENT_TCP_CALLBACK _pfEventCallBack,void *_pvArg)
+T_EVENT_UDP *EV_NET_EventUDP_CreateAndStart(T_EVENT_CTL *_ptEventCtl, char *_pcIpaddr, uint16_t _Port, PF_EVENT_UDP_CALLBACK _pfEventCallBack,void *_pvArg)
 {
 	 int opt_bBroadcast = 1;
 	 struct sockaddr_in tUdpSocketAddr;
diff --git a/src/net/evnet.h b/src/net/evnet.h
index 949328f..72f8345 100755
--- a/src/net/evnet.h
+++ b/src/net/evnet.h
@@ -4,7 +4,7 @@
  * @Author: sunzhguy
  * @Date: 2020-07-17 09:53:04
  * @LastEditor: sunzhguy
- * @LastEditTime: 2020-12-02 09:37:21
+ * @LastEditTime: 2020-12-02 11:06:06
  */ 
 #ifndef _EVNET_H_
 #define _EVNET_H_
@@ -83,7 +83,7 @@ void ev_tcp_set(ev_ctl_t *evctl, ev_tcp_t *evtcp, ev_tcp_cb_t cb, void *arg);
 int ev_tcp_msg(ev_ctl_t *evctl, ev_tcp_t *evtcp, const char *data, int32_t size);
 #endif
 
-T_EVENT_UDP* EV_NET_EventUDP_CreateAndStart(T_EVENT_CTL *_ptEventCtl, char *_pcIpaddr, uint16_t _Port, PF_EVENT_TCP_CALLBACK _pfEventCallBack,void *_pvArg);
+T_EVENT_UDP* EV_NET_EventUDP_CreateAndStart(T_EVENT_CTL *_ptEventCtl, char *_pcIpaddr, uint16_t _Port, PF_EVENT_UDP_CALLBACK _pfEventCallBack,void *_pvArg);
 
 #endif
 
diff --git a/src/udp_service.c b/src/udp_service.c
index 550dfc5..b367ae5 100755
--- a/src/udp_service.c
+++ b/src/udp_service.c
@@ -4,7 +4,7 @@
  * @Author: sunzhguy
  * @Date: 2020-07-22 08:40:25
  * @LastEditor: sunzhguy
- * @LastEditTime: 2020-12-02 09:40:52
+ * @LastEditTime: 2020-12-02 11:03:06
  */ 
 #include <unistd.h>
 #include <stdio.h>
@@ -29,7 +29,7 @@ struct udp_net_ctl {
 	char initflag;
 	T_EVENT_CTL *evctl;
 	struct netfds s2udp;
-	struct server *arg;
+	T_MAINSERVER *arg;
 }udp_net_ctl;
 
 
@@ -94,7 +94,7 @@ static void server_to_udp_cb(T_EVENT_CTL *evctl, T_EVENT_FD *evfd, int fd, E_EV_
 
 void udp_ctrl_init(struct udp_net_ctl *ctl)
 {
-	struct servloop * sl =&ctl->arg->sloop;
+	T_MAINSERVEREVENTLOOP * sl =&ctl->arg->tMainServerEventLoop;
     ctl->s2udp.n = nn_socket(AF_SP, NN_PAIR);
 	if (-1 == ctl->s2udp.n)
 		goto err1;
@@ -110,10 +110,10 @@ void udp_ctrl_init(struct udp_net_ctl *ctl)
 	
     ctl->s2udp.cb = handle_data_udp_form_server;
     ctl->s2udp.arg = ctl;
-    ctl->s2udp.evfd = EVIO_EventFd_Add(ctl->evctl, sl->sfds_udp.s, server_to_udp_cb, &sl->sfds_udp);//add the event fd 
+    ctl->s2udp.evfd = EVIO_EventFd_Add(ctl->evctl, sl->tNanoMsgFdsUDP.iSysFd, server_to_udp_cb, &sl->tNanoMsgFdsUDP);//add the event fd 
 	if (NULL == ctl->s2udp.evfd)
 		goto err4;
-	EVIO_Event_Watch_Read(ctl->evctl, sl->sfds_udp.evfd);
+	EVIO_Event_Watch_Read(ctl->evctl, sl->tNanoMsgFdsUDP.ptEventFd);
   err5:
 	EVIO_EventFd_Del(ctl->evctl, ctl->s2udp.evfd);
 err4:
@@ -129,16 +129,16 @@ err1:
 void *udp_service(void *arg)
 {
      pthread_t thread_ubroadt;
-     struct server *s =arg;
+     T_MAINSERVER *s =arg;
      T_EVENT_CTL * ev_ctrl = EVIO_EventCtl_Create();
      if(ev_ctrl == NULL)
       goto err;
     assert(0 == pthread_create(&thread_ubroadt, NULL,udp_broadcast_service,s));
 
-    pthread_mutex_lock(&s->start_lock);
-	++s->start_num;
-	pthread_cond_signal(&s->start_cond);
-	pthread_mutex_unlock(&s->start_lock);
+    pthread_mutex_lock(&s->tThread_StartMutex);
+	++s->iThread_bStartCnt;
+	pthread_cond_signal(&s->tThread_StartCond);
+	pthread_mutex_unlock(&s->tThread_StartMutex);
     
      while(1)
      {
